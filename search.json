[{"title":"Destoon 中引入 DTapi 框架并使用 Composer 管理依赖","date":"2020-05-08T05:42:36.000Z","url":"/2020/05/08/using-composer-in-destoon-with-DTapi/","tags":[["destoon","/tags/destoon/"],["DTapi","/tags/DTapi/"],["php","/tags/php/"],["composer","/tags/composer/"]],"categories":[["PHP","/categories/PHP/"]],"content":"最近项目使用到 Destoon CMS 来开发一套内容管理及商城综合系统，Destoon CMS 本身是一个前端模板渲染的项目，PC 端开发并没有碰到什么问题，涉及到小程序及 App 开发时确实碰到不少问题，讲到 App 及小程序开发自然是要涉及到接口开发的，然而对于接口开发 Destoon 官方是没有什么支持的，自己手撸也是一个比较耗时间且很多重复工作的活，还好在网上翻了一圈找到了一个开源项目 DTapi 1. 接入 DTapi按照 DTapi 文档 接入操作只因即可很方便的接入 DTapi 框架，但是到了此处却发现接入了 DTapi 框架后好像还缺点啥 没错，就是包管理了，不然轮子哪里来嘛 那我们首选的肯定是 Composer 这个大名鼎鼎的包管理器了 2. 引入 Composer以下流程需确保本机已装好 Composer 可执行程序并且设置在环境变量中 进入 Destoon 项目根目录，执行以下命令： 看到如上输出即表示我们的 composer require 命令已经成功执行，并且在项目根目录下面生成了 composer.json、 composer.lock 文件以及依赖包仓库 vendor 文件夹，而我们最重要的角色就是 vendor 文件夹下的 autoload.php (composer 的自动加载类文件) 此时我们只需要在上文 DTapi 文档 提到的对于 控制器的访问 中所说的入口文件中引入我们的 vendor/autoload.php 文件就可以正常使用第三方依赖包了 搞定，收工"},{"title":"DaoCloud + Local Server + Laravel + Laravel-Wechat 构建微信公众号测试平台","date":"2019-04-09T07:37:07.000Z","url":"/2019/04/09/daoloud-docker-laravel-wechat/","tags":[["laravel","/tags/laravel/"],["daocloud","/tags/daocloud/"],["docker","/tags/docker/"],["laravel-wechat","/tags/laravel-wechat/"]],"categories":[["PHP","/categories/PHP/"],["Laravel","/categories/PHP/Laravel/"],["Docker","/categories/Docker/"]],"content":"DaoCloud 使用 注册DaoCloud账号 Github 账号登录 微信账号登录 绑定支持的版本控制服务 Coding.net Github GitLab Bitbucket 添加自有主机&#x2F;集群 从项目创建DaoCloud Docker镜像 在上述版本控制服务提供商处创建项目laravel-english DaoCloud 控制台–&gt; 项目–&gt;创建项目 输入项目名称 从上述版本控制服务提供商处选择代码源 选择发布应用镜像 创建应用编排（Stack：PHP + MYSQL） 输入Stack名称 使用YML语法编写需要创建的容器的编排 Compose YML怎么写 保存并部署应用编排,如下图得到在运行中的应用 进去由 lravel-english 镜像创建的应用TestLaravel-TestLaravel—&gt;云隧道 访问  即可访问 Laravel-Wechat 配置 安装 修改 config\\app.php 的 providers 部分 发布 LaravelWechat 相关配置（生成 config\\wechat.php） （可选）添加外观到 config/app.php 中的 aliases 部分: 创建响应路由及Controller 修改app\\Http\\Middleware\\VerifyCSRFToken.php 微信开发者中心设置URL为 ，其余参数设置与 config\\wechat.php 相同即可 EasyWeChat 文档 搞定，收工！"},{"title":"Laravel + Vue.js 前后端分离（SPA）","date":"2019-03-25T07:03:55.000Z","url":"/2019/03/25/laravel-vue-spa/","tags":[["laravel","/tags/laravel/"],["vue","/tags/vue/"],["spa","/tags/spa/"]],"categories":[["PHP","/categories/PHP/"],["Vue","/categories/Vue/"],["Laravel","/categories/PHP/Laravel/"]],"content":"非单页应用引入第三方组件 在package.json中添加组件，Like： 运行 npm install 安装组件到项目 node_modules 文件夹 在 resources/assets/js/app.js 中添加引用，Like: 编译好js文件即可 前后端分离时的 Oauth 处理 前端请求发起三方登录请求 后端接受前端请求后拼接授权请求链接 返回重定向前端重定向至授权请求页面 用户登录第三方网站 第三方回调返回后端，后端获取数据并存储相关数据 后端返回重定向链接将前端重定向至专门接受 Access_Token 页面，再由前端处理后续逻辑 使用 VSCode 开发引入 iView 等第三方 UI 框架后出现 x-invalid-end-tag 如果你是用 Vetur的话 配置.eslintrc.js 并没有什么卵用 Vetur automatically uses eslint-plugin-vue for linting template. Linting configuration is based on eslint-plugin-vue’s essential rule set.只能关掉它自带的eslint-plugin-vue 【”vetur.validation.template”: false】 重新配置 .eslintrc “vue&#x2F;no-parsing-error”: [2, { “x-invalid-end-tag”: false }] Vue-Cli + axios 创建的项目生产环境（Nginx）跨域问题 修改 nginx/conf/vhost/your.domain.conf 配置文件 重新载入 nginx 配置文件并重启 nginx "},{"title":"Docker + Jenkins + Gradle 实现 Android 的持续集成","date":"2018-09-12T06:35:53.000Z","url":"/2018/09/12/jenkins-for-android-in-Docker/","tags":[["Android","/tags/Android/"],["Docker","/tags/Docker/"],["Jenkins","/tags/Jenkins/"],["sdkman","/tags/sdkman/"],["Gradle","/tags/Gradle/"]],"categories":[["Linux","/categories/Linux/"],["Docker","/categories/Linux/Docker/"]],"content":"Android 开发的同学应该都有被 Android Studio 支配的恐惧，每一次打包 Apk 的时候真的是可以去喝个下午茶再回来干活(公司的开发机配置一般,每次批量打包都得一两个小时电脑还卡的不能干其他事🤦‍♂️) 为了解决这种情况今天就来给大家讲讲使用服务器远程打包，多的不说，直接怼～～～ 1. 镜像篇1.1 构建镜像本例中我们使用 Dockerfile 来构建接下来需要用到的镜像,文件内容如下: entrypoint.sh 为入口指令,包含镜像部署启东时会运行的一系列指令 1.2 部署镜像接下来就是将构建好的镜像部署到服务器,我们使用 \bdocker-compose 来实现部署 docker-compose.yml 上述文件包含了 nginx-proxy 作为代理服务器来进行反向代理, LetsEncrypt 主要是用来签发证书,实现 https, jenkins 即为我们的持续集成服务提供者,android-sdk 则是用来为 jenkins 提供 Android SDK 支持 2. Android 构建集成2.1 Jenkins 配置按照网上的基本配置教程配置好 Jenkins ,设置完管理员\b密码 2.2 全局工具配置此处配置主要用来配置全局的以来环境等,我们这里只需要关注 JDK,Git,Gradle 三项的\b配置,\b均可选择新增按钮添加需要支持的版本后应用保存即可 2.3 全局凭据配置因为我们使用的是 Github 来托管项目,那就需要从 Github \b上面\b同步代码到服务器\b用来构建,这里涉及到 SSH Key 的问题,我们可以去\b凭据管理里面新增一个凭据,类型选择 SSH Key **** 类型,\b别名随便填,但是后面得使用别名生成 SSH Key 如下: 将上面的公钥添加到 Github 设置界面的 SSH Key 页面,私钥填入上面创建的凭据里面, 通过 SSH Key \b同步代码就配置好了 2.4 构建任务配置接下来我们就可以开始创建任务了 安装插件 Android Lint, Github integration 等 \b创建新的构建任务,选择自由风格 基本设置 源码设置 构建触发器设置 构建设置 接下来点击立即构建就可以开始\b第一次构建了,完成第一次构建后即可在工作区查看项目相关文件了 搞定,收工!"},{"title":"使用 Gradle 实现自动打包 (Weex)","date":"2018-08-16T06:50:36.000Z","url":"/2018/08/16/weex-tips-with-gradle/","tags":[["Android","/tags/Android/"],["Gradle","/tags/Gradle/"],["Weex","/tags/Weex/"],["Shell","/tags/Shell/"]],"categories":[["Android","/categories/Android/"],["Gradle","/categories/Android/Gradle/"]],"content":"随着 Weex、React Native 这些框架性能的进步,现在越来越多移动端项目会选择使用这类框架去进行混合开发,再提高效率的同时也不会使得性能有太大的问题.我们今天讲讲在\b集成这些框架到 Android Native 项目中时如何提高我们的工作效率.框架我们就不介绍了,可以自行了解: Weex React Native 1. 打包篇在将 Weex 集成到 Android 项目中的时候\b,因为 Weex SDK 需要加载的是 JSBundle 文件,所以我们得在编写完 Weex 项目后,执行npm run build,然后再将生成在 dist 文件夹内的 *.js 文件拷贝到 Android 项目的 assets 文件夹下然后再打包 Android 项目才能生成一个正常集成的 Android App,于是我们在这里引入 Gradle 来解决我们的效率问题 在项目根目录下创建 weex.sh 编辑 App module 根目录下的 build.gradle 添加如下: 这样在右侧的 Gradle Task 面板就会生成 weexDebug、weexRelease 这类的 task,点击即可运行上述脚本.(当然,点击 build 按钮的时候此任务也是会运行的) 搞定.收工!"},{"title":"将 Weex 组件集成到现有 Android 项目踩坑","date":"2018-08-14T15:17:59.000Z","url":"/2018/08/14/weex-in-android/","tags":[["vue","/tags/vue/"],["android","/tags/android/"],["weex","/tags/weex/"]],"categories":[["Android","/categories/Android/"],["Weex","/categories/Android/Weex/"]],"content":"本文总体根据官网链接 集成 Weex 到已有应用 进行集成，下面列出了遇到的问题及解决办法。 1. ReferenceError: Vue is not defined跟着\b官网的教程开始\b集成后你会发现项目跑起来后会提示 查了资料才发现这是官网文档未及时更新的缘故,只需要将依赖导入语句修改如下然后重新编译即可 同时,官网文档的\b render 方法也需要修改如下 2. JSBundle 资源生成\bAndroid 加载 weex 和加载 React Native 类似也是要提供个 JSBundle 文件. 我们 weex create 后生成的项目文件都是以 .vue 后缀名结尾的,在引入 Android 之前,我们需要进行\b些处理才能放入 Android 项目的 assets 目录中供 WeexSdk 调用: 在项目根目录运行 npm run build 编译完成后会在dist目录下生成文件,每个vue文件会生成对应的js, 然后我们将 dist 文件夹\b内的 *.js 文件拷贝到 Android Assets 目录下即可 "},{"title":"使用 Apache 部署 Vue.js 踩坑","date":"2018-08-06T03:15:04.000Z","url":"/2018/08/06/depoly-vue-with-docker/","tags":[["apache","/tags/apache/"],["httpd","/tags/httpd/"],["vue.js","/tags/vue-js/"],["vue","/tags/vue/"]],"categories":[["Vue","/categories/Vue/"]],"content":"单文件项目 URLRewrite 问题生产环境下，路由为mode:history的时候，刷新页面时我们会发现页面报 404 错误，这时我们就需要去修改 Apache 的设置文件 httpd.conf 使其支持URLRewrite. 下一步,在 Web 项目根目录新建 .htaccess 文件,写入如下配置 完整配置文件下载:httpd.conf Vue 项目跨域请求问题开发环境代理配置如下 在config 文件夹里面新建一个 api.config.js 配置文件 修改 main.js 如下 至此,项目可以动态响应不同的环境解决跨域请求问题"},{"title":"Docker 使用 nginx-proxy + letsencrypt 实现自动签发 SSL 证书","date":"2018-07-17T01:51:32.000Z","url":"/2018/07/17/docker-nginx-proxy-ssl/","tags":[["nginx","/tags/nginx/"],["letsencrypt","/tags/letsencrypt/"],["docker","/tags/docker/"],["ssl","/tags/ssl/"]],"categories":[["Linux","/categories/Linux/"],["Docker","/categories/Linux/Docker/"]],"content":"1. 创建一个自定义网络 nginx-net 查看创建网络结果 2. 部署 nginx-proxy 上述命令创建了一个连接到上面我们创建的自定义网络 nginx-net 且开放了 80、443 端口的 nginx-proxy 容器，该容器使用 /var/run/docker.sock 来检测及发现外部容器的状态以便及时修改自己的配置 3. 部署 Letsencrypt-nginx-proxy-companion 上述命令创建了一个连接到自定义网络 nginx-net 的容器，该容器挂载了 /etc/nginx/certs 用来存入生成的证书文件并方便 nginx-proxy 容器读取（此数据卷两容器之间共享），挂载 /var/run/docker.sock 功能同上面 nginx-proxy 容器的功能 4. 部署 WebApp从这里开始我们就要部署自己的 Web 应用了，在部署的时候需要注意几个环境变量： VIRTUAL_HOST 需要反向代理的域名 LETSENCRYPT_HOST 需要使用 LetsEncrypt 签发证书的域名 LETSENCRYPT_EMAIL 使用 LetsEncrypt 签发证书时使用的邮箱 另外在创建 Web 应用容器时一般需要向外部暴露自己的 Web 服务监听端口 至此，一个自动生成 https 证书的服务就搭建完成了 PS:若所有容器都连接到同一网络环境下，一般是不需要去暴露端口的，可以通过 容器别名：服务端口 的方式去访问各个容器的服务"},{"title":"Java 实现 JavaScript eval 函数","date":"2018-05-03T04:14:01.000Z","url":"/2018/05/03/Java-%E5%AE%9E%E7%8E%B0-JavaScript-eval-%E5%87%BD%E6%95%B0/","tags":[["Java","/tags/Java/"],["JavaScript","/tags/JavaScript/"],["动态加载","/tags/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"],["反射","/tags/%E5%8F%8D%E5%B0%84/"]],"categories":[["Java","/categories/Java/"]],"content":"具体实现 MyClassLoader.java Eval.java "},{"title":"Hexo problems","date":"2018-05-03T02:28:22.000Z","url":"/2018/05/03/Hexo-problems/","tags":[["hexo","/tags/hexo/"],["npm","/tags/npm/"],["node","/tags/node/"]],"categories":[["Hexo","/categories/Hexo/"]],"content":"DTraceProviderBindings.node issue Mac 环境下使用如下命令重新编译安装 Hexo 的 node_modules 依赖 如果是使用 nvm 管理 node 版本相关，使用一下方式修复即可 "},{"title":"HTTP TO HTTPS （Centos 6.5 Final）","date":"2018-04-10T04:21:21.000Z","url":"/2018/04/10/HTTP-TO-HTTPS-%EF%BC%88Centos-6-5-Final%EF%BC%89/","tags":[["http","/tags/http/"],["https","/tags/https/"],["nginx","/tags/nginx/"],["letsencrypt","/tags/letsencrypt/"]],"categories":[["Linux","/categories/Linux/"]],"content":"环境准备因为 Certbot 的很多依赖并不在系统默认 Repo 中,需要先安装 EPEL Repo ,运行 yum install epel-release ,同时为了防止组件过旧导致的报错,建议运行一次 yum update 安装 Certbot因为目前没有 CentOS 的预编译安装包，所以通过 certbot-auto 脚本来获得 Certbot . 获取 certbot-auto 脚本并赋予执行权限 运行 certbot-auto 脚本安装 Certbot PS:cerbot-auto 会自动下载最新版并进行安装,如果你希望使用某一特定版本并禁止自动更新的话，请在运行时加上 --no-self-upgrade . 使用 Certbot 生成证书 示例 修改 Nginx 配置文件 在原有的 you.domain.com.conf 文件基础上加上 执行 service nginx reload 重载配置文件 手动更新证书文件 执行下面的命令并按照提示进行操作 执行下面的命令强制更新 配置自动更新证书文件 执行 在 Crontab 中添加定时更新任务 搞定，收工！"},{"title":"Homestead 翻墙共享主机（Host）代理","date":"2018-04-03T06:55:46.000Z","url":"/2018/04/03/Homestead-%E7%BF%BB%E5%A2%99%E5%85%B1%E4%BA%AB%E4%B8%BB%E6%9C%BA%EF%BC%88Host%EF%BC%89%E4%BB%A3%E7%90%86/","tags":[["laravel","/tags/laravel/"],["homestead","/tags/homestead/"],["proxy","/tags/proxy/"]],"categories":[["PHP","/categories/PHP/"],["Laravel","/categories/PHP/Laravel/"]],"content":" homestead 里安装一个 cow，然后在 .env 文件中增加一行 HTTPS_PROXY= 编辑 ～/.cow/rc 文件 运行 nohup ./cow &amp;， nohup 为使进程后台运行 "},{"title":"Laravel 日志踩坑","date":"2018-04-03T04:19:19.000Z","url":"/2018/04/03/Laravel-%E6%97%A5%E5%BF%97%E8%B8%A9%E5%9D%91/","tags":[["Laravel","/tags/Laravel/"],["Log","/tags/Log/"]],"categories":[["PHP","/categories/PHP/"],["Laravel","/categories/PHP/Laravel/"]],"content":" 分享一个大家可能会踩到的坑，如果你在使用 Laravel，并且日志配置是按天记录的（daily）,那么你千万不要用 root 角色来执行计划任务，请以你的 nginx 子进程用户（也就是我们平常说的 www 用户），比如我的机器 Ubuntu 默认 apt 安装 nginx 的话是 www-data，那么应该修改 crontab 配置像以下这样： 否则，以 root 角色执行的话，只要遇到记日志的代码就会以 root 角色创建，这样你的 web 服务运行时就无法写入日志了。 "},{"title":"Android 自定义 View 时 Wrap_Content 相关","date":"2018-03-21T03:49:45.000Z","url":"/2018/03/21/custom-view/","tags":[["Adnroid","/tags/Adnroid/"],["View","/tags/View/"],["wrap_content","/tags/wrap-content/"]],"categories":[["Android","/categories/Android/"],["自定义 View","/categories/Android/%E8%87%AA%E5%AE%9A%E4%B9%89-View/"]],"content":"在 Android 自定义 View 时我们需要测量 View 的宽度和高度, 那么当自定义View的布局参数设置成 wrap_content时时一般的解决方案如下: 这种方法在一定程度上确实可以解决这个问题,\b但是对于 MeasureSpec 的判断并不精确, 观察下表可以发现: View 的 AT_MOST 模式对应的不只是 wrap_content ，也有可能是 match_parent 将上述方法修改如下即可: 通过判断 getLayoutParams().width / getLayoutParams().height 是否等于 ViewGroup.LayoutParams.WRAP_CONTENT 来确定是否为 wrap_content，保证了精确度"},{"title":"Docker 笔记","date":"2018-03-03T07:42:12.000Z","url":"/2018/03/03/docker-note/","tags":[["daocloud","/tags/daocloud/"],["docker","/tags/docker/"]],"categories":[["Linux","/categories/Linux/"],["Docker","/categories/Linux/Docker/"]],"content":"容器互联 dao_testlaravel_3 即为所需要的互联后的容器&#x2F;应用名称 laravel-mysql 即为需要链接的 mysql 容器名称 --link 链接 -d 容器后台运行 -p 80 暴露 dao_testlaravel_3 容器的 80 端口到宿主机的动态端口 daocloud.io/layoute/laravle-english 为所需拉取的镜像 "},{"title":"Nginx 部署 Node Web 项目","date":"2018-02-15T01:45:04.000Z","url":"/2018/02/15/node-nginx/","tags":[["nginx","/tags/nginx/"],["node","/tags/node/"]],"categories":[[" ",""]],"content":"Nginx反向代理由于本例中服务器需要使用 php 服务，所以之前安装了 WDCP 面板(自带LNAMP)，所以此处不提如何安装Nginx Nginx添加vhost 修改nginx&#x2F;conf&#x2F;vhost&#x2F;your.domain.conf，如下 安装Node.js 安装开发环境依赖包（编译Node.js源码所使用的依赖），使用yum -y install gcc gcc-c++ kernel-devel或者yum -y update &amp;&amp; yum -y groupinstall&quot;Development Tools&quot; 下载Node.js源码，Node 官网点击Download即可进入选择版本下载，一般选择LTS版本即可，得到node-vX.X.X.tar.gz 解压源码, tar -xf node-vX.X.X.tar.gz,得到文件夹node-vX.X.X 开始编译安装 Node后台管理工具Forever使用 安装 npm install forever -g 使用 forever start app.js 查看进程 forever list "},{"title":"添加依赖库出现 Manifest merger failed 错误解决办法","date":"2017-12-14T02:08:22.000Z","url":"/2017/12/14/grandle-manifest-merge-conflict/","tags":[["gradle","/tags/gradle/"],["manifest","/tags/manifest/"],["com.android.support","/tags/com-android-support/"]],"categories":[["Android","/categories/Android/"],["Gradle","/categories/Android/Gradle/"]],"content":"Android 开发中，\b添加的依赖库多了以后，gradle build 时经常会碰到如下问题 Manifest merger failed : Attribute meta-data#android.support.VERSION@value value&#x3D;(26.1.0) from [com.android.support:support-v13:26.1.0] AndroidManifest.xml:28:13-35 解决办法: 在添加依赖的 build.gradle 文件中添加如下代码再次 Sync 即可解决 "},{"title":"利用 libfaketime 无限期试用 Surge For Mac","date":"2017-12-03T06:52:16.000Z","url":"/2017/12/03/fake-surge/","tags":[["mac","/tags/mac/"],["surge","/tags/surge/"],["software","/tags/software/"]],"categories":[[" ",""]],"content":" 首先通过 brew 安装 libfaketime 。由于依赖 GNU 时间，还需要安装 coreutils 。如还未装 brew ，首先在终端运行如下命令安装: 安装完成后，继续在终端通过 brew 安装 libfaketime 和 coreutils : 直接通过 faketime 来运行 Surge ，并且为 Surge 单独伪造系统时间为 2007 年 1 月 1 日: 改为 10 秒后关闭 libfaketime 的以修复 libfaketime 的长时间高 CPU\b 占用 关闭终端，收工 转载自: 子与孟子曰"},{"title":"Laravel skills","date":"2017-11-19T00:51:44.000Z","url":"/2017/11/19/laravel-skill/","tags":[["https","/tags/https/"],["nginx","/tags/nginx/"],["laravel","/tags/laravel/"],["crontab","/tags/crontab/"]],"categories":[["PHP","/categories/PHP/"],["Laravel","/categories/PHP/Laravel/"]],"content":"记录日志记录日志到 storage\\logs\\laravel.log Laravel Nginx Config With Https 创建数据表修改迁移 任务调度执行不成功 执行 crontab -e 编辑定时任务，将所有相对路径改为绝对路径（包括可执行文件） "},{"title":"Android 使用 Jshc SSH 连接服务器","date":"2017-08-14T06:47:08.000Z","url":"/2017/08/14/android-jshc/","tags":[["Android","/tags/Android/"],["SSH","/tags/SSH/"],["Java","/tags/Java/"]],"categories":[["Android","/categories/Android/"],["Library","/categories/Android/Library/"]],"content":" 添加依赖库。在 app module 的 build.gradle 中向\b dependencies 中添加 implementation ‘com.jcraft:jshc:0.1.54 后执行 gradle sync 运行一条 shell 指令。 "},{"title":"iOS 笔记：Swift 隐藏标题栏","date":"2017-06-05T02:48:14.000Z","url":"/2017/06/05/swift-titlebar/","tags":[["swift","/tags/swift/"],["NSWindowController","/tags/NSWindowController/"]],"categories":[["Swift","/categories/Swift/"]],"content":"必须使用NSWindowController Or Example: "},{"title":"Pythonista 3 安装 StaSh","date":"2017-02-16T02:23:48.000Z","url":"/2017/02/16/pythonista-stash/","tags":[["ios","/tags/ios/"],["python","/tags/python/"],["pythonista","/tags/pythonista/"]],"categories":[["Software","/categories/Software/"],["iOS","/categories/Software/iOS/"]],"content":" StaSh (ywangd&#x2F;stash)，这是一个可以在 Pythonista 里面运行的 Shell，内置了 Git 和 pip 工具。装完之后在里面运行 pip install 就可以安装相应的第三方库了 在 Pythonista Console 界面输入如下命令, 换行执行即可 Console 输出完成后重启 Pythonista ，主界面右滑打开文件界面，选择 This iPhone ,选择 launch_stash.py ,点击右上角三角图标执行即可调起 Stash shell 窗口 每次需要使用 Stash shell 时运行上述文件即可 "},{"title":"iOS 笔记一","date":"2017-02-02T12:21:43.000Z","url":"/2017/02/02/iOS-first/","tags":[["iOS","/tags/iOS/"],["Swift","/tags/Swift/"],["Xcode","/tags/Xcode/"]],"categories":[["Swift","/categories/Swift/"]],"content":"StoryBoard文件与.Swift文件的关联 创建StoryBoard文件并设置属性Class对应到指定的.Swift文件即可创建两者之间的关联 在StoryBoard文件中创建布局，并从StoryBoard创建到.Swift文件的@IBOutlet链接 在.Swift文件中对所创建的@IBOutlet对象添加addTarget方法（对应Android中的Listenner） action 的值为#selector(func)之类 "},{"title":"Win10 - 使用‘Alt+Tab’不能像 win7 切换窗口及更改切换风格","date":"2016-05-14T00:48:00.000Z","url":"/2016/05/14/win10-alt-tab/","tags":[["win10","/tags/win10/"],["窗口切换","/tags/%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/"]],"categories":[["windows","/categories/windows/"]],"content":" 点击开始菜单，选择运行，输入 regedit ，点击确定 定位到HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer 在右侧找到 AltTabSettings 的键值对，没有则新建，类型为 DWORD(32位)值 ，然后赋值为 1 即可恢复使用 WinXp 经典的小图标且没有预览的切换风格 补充: 另外，HKEY_CURRENT_USER\\Control Panel\\Desktop 中的项 CoolSwitchColumns 与 CoolSwitchRows 控制着经典风格的显示的行列数，可以根据自己需要修改 参考"},{"title":"Categories","date":"2018-05-03T08:58:36.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"关于我","date":"2020-05-09T02:31:25.000Z","url":"/about/index.html","categories":[[" ",""]]},{"title":"站内搜索","date":"2020-12-27T14:29:46.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"TagCloud","date":"2018-05-03T08:56:59.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"友情链接","date":"2020-05-09T02:31:09.000Z","url":"/links/index.html","categories":[[" ",""]]}]